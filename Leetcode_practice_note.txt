Leetcode practice note
-Created by Lucy Xia at April 28th 2021

That’s just the way it is - You have to keeping working hard until you get to that place

HashMap
1.Two Sum
20.Valid Parentheses 
136. Single Number
137. Single Number II



Stack
20.Valid Parentheses 







*** ListNode method ***
pros:
插入和删除具有O(1)的时间复杂度

cons:
不能随机访问
无法直接访问前驱节点

functions:
创建、插入、删除、查找、逆序、合并、双指针方法
需要使用result list作为最后return结果的需要搭配dummy来做指针

1).getNext()
2).getValue() 3).setNext(ListNode theNewNext)
4).setValue()

List problems
*cycle	
141. Linked List Cycle  //判断是否有一个环存在：快慢指针法
142. Linked List Cycle II  //存在环的话，求出开始循环的位置：包含两个while的快慢指针法
160. Intersection of Two Linked Lists //两个list都出现的部分 x+z+y+z=y+z+x+z(所以在第二个z的地方相遇）
-------------
*remove duplicates
82. Remove Duplicates from Sorted List II    //用来跳过的指针和真正移动的指针  //重复的直接去掉
83. Remove Duplicates from Sorted List   //重复的可以保留一个
-------------
*merge
21.Merge Two Sorted Lists     // result搭配Dummy_head（recursive method
Hard）23.Merge K Sorted Lists  // 没做过
-------------
*reverse
206. Reverse Linked List   // 三个宣告，while包四个转移语法
92. Reverse Linked List II //
Hard)25. Reverse Nodes in k-Group
-------------
*swap
24. Swap Nodes in Pairs
-------------
*sort in ascending ordering
includes log sth)148. Sort List  //divide and conquer进行排序
147. Insertion Sort List //特別註明使用插入排序的方式进行排序
-------------
*rotate
61. Rotate List //將左邊的n - k % n個換到右邊 （方法待優化）
-------------
*reorder
143. Reorder List
-------------
*partition
86. Partition List
-------------
*






2.Add Two number	//carry
19.Remove Nth Node From End of List    //雙指針拉距離










Tree
94. Binary Tree Inorder Traversal
144. Binary Tree Preorder Traversal
98. Validate Binary Search Tree //判断是不是BST
101. Symmetric Tree
102. Binary Tree Level Order Traversal 
107. Binary Tree Level Order Traversal II  //只要把要加去的放在0的位子就是加在最前面
108. Convert Sorted Array to Binary Search Tree  //中间点作为root
109. Convert Sorted List to Binary Search Tree  // list先转化为array比较快
112. Path Sum
113. Path Sum II





Return List<List<Integer>>
//之前还有一个
102. Binary Tree Level Order Traversal
113. Path Sum II
118. Pascal's Triangle



Array[]
26.Remove Duplicates from Sorted Array   ////一种数字在阵列中最多出现1次
80. Remove Duplicates from Sorted Array II //一种数字在阵列中最多出现2次
27.Remove Element  //計數
31. Next Permutation //比这个排列大的下一个排列（很需要技巧）
34. Find First and Last Position of Element in Sorted Array
35. Search Insert Position
88. Merge Sorted Array //从后往前比较，结果放在前面





Reverse
92. Reverse Linked List II
206. Reverse Linked List
108. Convert Sorted Array to Binary Search Tree
109. Convert Sorted List to Binary Search Tree





String
28.Implement strStr() 
67. Add Binary //二进制加法


Math
7.Reverse Integer
9.Palindrome Number
13.Roman to Integer
29. Divide Two Integers
66. Plus One //整数(以array的形式)+1
67. Add Binary //二进制加法
70. Climbing Stairs //只有一步或两步，有几种方法


String method
1)String str=“ ";
   str.substring(a,b); //第a个字符到第b-1个字符
2）String s = “ ";
        char[] a = s.toCharArray(); //把string转换成char的形式
3）b.charAt(p2)-‘0' //String通过char转型为int


Math method
1)Math.abs()
2)Integer.MAX_VALUE
3)Math.min()
4)str.charAt()


StringBuilder method
1)StringBuilder str = new StringBuilder();
2)str.append()
3)str.toString()
4)str.capacity()






getNext()HashMap
1) HashMap<Integer, Integer> sth= new HashMap();
2).put(key, value)
3).containsKey()
*(4)+(5)要在import org. javatuples. KeyValue;的情況下使用
4).getValue()
5).getKey()
6).remove(key)
7).clear()
8)// get key through value 
      for(int key: countfrequency. keySet()){
            if(countfrequency. get(key)==1)
                return key;
        }
    


Stack
1)push()
2)pop()
3)isEmpty() 
4)peek()

recursive method
38. Count and Say
110. Balanced Binary Tree //相减绝对值+1，高度差<1
257. Binary Tree Paths
111. Minimum Depth of Binary Tree




二分法
69.Sqrt(x) 

指针
26.Remove Duplicates from Sorted Array
80. Remove Duplicates from Sorted Array II  //一种数字在阵列中最多出现2次
82. Remove Duplicates from Sorted List II    //用来跳过的指针和真正移动的指针




Todo List
8.String to Integer
12. Integer to Roman
46. Permutations //给定包含特定数字的array，回传可能的组合array //List<List<Integer>